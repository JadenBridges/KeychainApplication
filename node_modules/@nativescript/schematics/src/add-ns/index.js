"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const strings_1 = require("@angular-devkit/core/src/utils/strings");
const utils_1 = require("../utils");
const angular_project_parser_1 = require("../angular-project-parser");
let extensions;
let projectSettings;
function default_1(options) {
    extensions = {
        ns: (options.nsExtension.length > 0) ? '.' + options.nsExtension : '',
        web: (options.webExtension.length > 0) ? '.' + options.webExtension : ''
    };
    return schematics_1.chain([
        validateOptions(options),
        getProjectSettings(options.project),
        validateProjectSettings,
        addNativeScriptSchematics,
        addNsFiles(options),
        options.sample ?
            addSampleFiles() :
            schematics_1.noop(),
        addAppResources(),
        mergeGitIgnore,
        addRunScriptsToPackageJson,
        addNativeScriptProjectId,
        excludeNsFilesFromTsconfig,
        addHomeComponent(options.nsExtension, options.webExtension),
        addWebpackConfig(),
        installNpmModules()
    ]);
}
exports.default = default_1;
/**
 * Make sure that nsExtension != webExtension
 */
const validateOptions = (options) => () => {
    if (options.nsExtension === options.webExtension) {
        throw new schematics_1.SchematicsException(`nsExtension "${options.nsExtension}" and webExtension "${options.webExtension}" should have different values`);
    }
};
/**
 * This schematic should only be used with ng/cli v6+
 */
const validateProjectSettings = (_tree) => {
    const cliVer = projectSettings.ngCliSemVer;
    if (cliVer.major < 6) {
        throw new schematics_1.SchematicsException(`@angular/cli ${cliVer.toString()} version detected. Upgrade to 6.0 or newer.`);
    }
};
const getProjectSettings = (projectName) => (tree, context) => {
    context.logger.info('Reading Project Settings');
    projectSettings = angular_project_parser_1.getAngularProjectSettings(tree, projectName);
    context.logger.info(`Project settings:
${JSON.stringify(projectSettings, null, 2)}`);
};
const addNativeScriptSchematics = (tree, context) => {
    context.logger.info('Adding @nativescript/schematics to angular.json');
    const angularJson = utils_1.getJsonFile(tree, 'angular.json');
    const defaultCollection = '@nativescript/schematics';
    if (angularJson.cli && angularJson.cli.defaultCollection !== defaultCollection) {
        context.logger.warn(`Changing default schematics collection
${JSON.stringify(angularJson.cli, null, 2)}
  to:
${JSON.stringify(angularJson.cli, null, 2)}`);
    }
    angularJson.cli = {
        'defaultCollection': defaultCollection
    };
    tree.overwrite('angular.json', JSON.stringify(angularJson, null, 2));
};
const addNsFiles = (options) => (_tree, context) => {
    context.logger.info('Adding {N} files');
    const templateOptions = {
        sample: options.sample,
        theme: true,
        dasherize: strings_1.dasherize,
        nsext: extensions.ns,
        webext: extensions.web,
        sourceDir: projectSettings.sourceRoot,
        prefix: projectSettings.prefix,
        main: projectSettings.mainName,
        entryModuleClassName: projectSettings.entryModuleClassName,
        entryModuleName: projectSettings.entryModuleName,
        entryModuleImportPath: projectSettings.entryModuleImportPath,
        entryComponentClassName: projectSettings.entryComponentClassName,
        entryComponentName: projectSettings.entryComponentName,
        entryComponentImportPath: projectSettings.entryComponentImportPath,
        indexAppRootTag: projectSettings.indexAppRootTag
    };
    const templateSource = schematics_1.apply(schematics_1.url('./_ns-files'), [
        schematics_1.template(templateOptions)
    ]);
    return schematics_1.mergeWith(templateSource);
};
const addSampleFiles = () => (_tree, context) => {
    context.logger.info('Adding sample files');
    const templateOptions = {
        nsext: extensions.ns,
        webext: extensions.web,
        sourceDir: projectSettings.sourceRoot,
        indexAppRootTag: projectSettings.indexAppRootTag,
    };
    const path = path_1.join(projectSettings.sourceRoot, 'app');
    const templateSource = schematics_1.apply(schematics_1.url('./_sample-files'), [
        schematics_1.template(templateOptions),
        schematics_1.move(path),
    ]);
    return schematics_1.mergeWith(templateSource);
};
const addHomeComponent = (nsExtension, webExtension) => (_tree, context) => {
    context.logger.info('Adding Shared Home Component');
    return schematics_1.schematic('component', {
        nsExtension: nsExtension,
        webExtension: webExtension,
        web: true,
        nativescript: true,
        name: 'home',
        module: 'app',
        inlineStyle: true,
        prefix: projectSettings.prefix,
        spec: false,
    });
};
const addAppResources = () => (_tree, context) => {
    context.logger.info('Adding App_Resources');
    return schematics_1.schematic('app-resources', {
        path: ''
    });
};
/**
 * Adds NativeScript specific ignores to .gitignore
 */
const mergeGitIgnore = (tree, context) => {
    context.logger.info('Adding NativeScript specific exclusions to .gitignore');
    if (!tree.exists('.gitignore')) {
        tree.create('.gitignore', '');
    }
    const gitignore = utils_1.getFileContents(tree, '/.gitignore').split('\n');
    // Prepare NativeScript .gitignore lines
    let nsGitignoreContent = [
        'node_modules/',
        'platforms/',
        'hooks/',
        `${projectSettings.sourceRoot}/**/*.js`,
    ];
    // Remove any lines that are already in the .gitignore
    nsGitignoreContent = nsGitignoreContent.filter(nsLine => !gitignore.includes(nsLine));
    // Prepare content to add to .gitignore
    const content = `# NativeScript
${nsGitignoreContent.join('\n')}

`;
    // Add content to .gitignore
    const recorder = tree.beginUpdate('.gitignore');
    recorder.insertLeft(0, content);
    tree.commitUpdate(recorder);
};
/**
 * Adds {N} npm run scripts to package.json
 * npm run ios => tns run ios --bundle
 * npm run android => tns run android --bundle
 */
const addRunScriptsToPackageJson = (tree, context) => {
    context.logger.info('Adding NativeScript run scripts to package.json');
    const packageJson = utils_1.getJsonFile(tree, 'package.json');
    packageJson.scripts = packageJson.scripts || {};
    packageJson.scripts = Object.assign({
        android: 'tns run android --bundle',
        ios: 'tns run ios --bundle'
    }, packageJson.scripts);
    tree.overwrite('package.json', JSON.stringify(packageJson, null, 2));
};
const addNativeScriptProjectId = (tree, context) => {
    context.logger.info('Adding NativeScript Project ID to package.json');
    const packageJson = utils_1.getJsonFile(tree, 'package.json');
    packageJson.nativescript = packageJson.nativescript || {};
    packageJson.nativescript = Object.assign({
        id: 'org.nativescript.ngsample'
    }, packageJson.nativescript);
    tree.overwrite('package.json', JSON.stringify(packageJson, null, 2));
};
/**
 * Adds {N}-specific extensions
 * to the list with excluded files
 * in the web TypeScript configuration
 */
const excludeNsFilesFromTsconfig = (tree, context) => {
    context.logger.info('Excluding NativeScript files from web tsconfig');
    const tsConfigPath = projectSettings.tsConfig;
    const tsConfig = utils_1.getJsonFile(tree, tsConfigPath);
    tsConfig.exclude = tsConfig.exclude || [];
    const nsExtensions = [
        '**/*.tns.ts',
        '**/*.android.ts',
        '**/*.ios.ts',
        './main.ns.aot.ts',
        './main.ns.ts',
    ];
    tsConfig.exclude = [...tsConfig.exclude, ...nsExtensions];
    tree.overwrite(tsConfigPath, JSON.stringify(tsConfig, null, 2));
};
// let npmInstallTaskId: TaskId;
const installNpmModules = () => (_tree, context) => {
    context.logger.info('Installing npm modules');
    // @UPGRADE: Update all versions whenever {N} version updates
    const dependeciesToAdd = {
        dependencies: {
            'nativescript-angular': '~6.1.0',
            'nativescript-theme-core': '~1.0.4',
            'reflect-metadata': '~0.1.8',
            'tns-core-modules': '~4.2.0'
        },
        devDependencies: {
            'nativescript-dev-webpack': '^0.15.0'
        }
    };
    const options = {
        json: JSON.stringify(dependeciesToAdd),
        workingDirectory: ''
    };
    context.addTask(new tasks_1.RunSchematicTask('@nativescript/schematics', 'npm-install', options));
};
const addWebpackConfig = () => (tree) => {
    const templateOptions = {
        entryModuleClassName: projectSettings.entryModuleClassName,
        entryModuleImportPath: projectSettings.entryModuleImportPath,
        nsext: extensions.ns,
        shortExt: extensions.ns.replace('.', '')
    };
    // This is always going to be the case for ng cli before 6.0
    if (!tree.exists('webpack.config.js')) {
        const templateSource = schematics_1.apply(schematics_1.url('./_webpack-files'), [
            schematics_1.template(templateOptions)
        ]);
        return schematics_1.mergeWith(templateSource);
    }
    else {
        throw new schematics_1.SchematicsException('Failed at addWebpackConfig step. webpack.config.js already exists.');
    }
};
// const updateDevWebpack = () => (tree: Tree, context: SchematicContext) => {
//   context.logger.info('Updating webpack.config.js');
//   const options: UpdateDevWebpackOptions = {
//     nsext: extensions.ns
//   }
//   if (projectSettings.ngCliSemVer.major === 1) {
//     return schematic('update-dev-webpack', options)(tree, context);
//   } else {
//     context.addTask(new RunSchematicTask('@nativescript/schematics', 'update-dev-webpack', options), [npmInstallTaskId]);
//   }
// }
//# sourceMappingURL=index.js.map