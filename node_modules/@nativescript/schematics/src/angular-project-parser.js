"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const path_1 = require("path");
const schematics_1 = require("@angular-devkit/schematics");
// import { getWorkspace, WorkspaceProject } from '@schematics/angular/utility/config';
const utils_1 = require("./utils");
const ast_utils_1 = require("./ast-utils");
const node_utils_1 = require("./node-utils");
function getAngularProjectSettings(tree, projectName = '') {
    const projectSettings = getCoreProjectSettings(tree, projectName);
    const entryModule = getEntryModuleMetadata(tree, projectSettings.mainPath);
    const entryComponent = getEntryComponentMetadata(tree, entryModule.path);
    const indexAppRootTag = getAppRootTag(tree, entryComponent.path);
    return Object.assign({}, projectSettings, { entryModuleClassName: entryModule.className, entryModuleImportPath: entryModule.importPath, entryModuleName: entryModule.name, entryModulePath: entryModule.path, entryComponentClassName: entryComponent.className, entryComponentImportPath: entryComponent.importPath, entryComponentName: entryComponent.name, entryComponentPath: entryComponent.path, indexAppRootTag });
}
exports.getAngularProjectSettings = getAngularProjectSettings;
// Step 1 - get appRoot => open .angular-cli.json -> get apps.root
function getCoreProjectSettings(tree, projectName) {
    const ngCliSemVer = node_utils_1.getAngularCLISemver(tree);
    const ngSemVer = node_utils_1.getAngularSemver(tree);
    // TODO: this might go away
    if (ngCliSemVer.major >= 6) {
        const project = getProjectObject(tree, projectName);
        const root = project.root;
        // this by default is src
        // const sourceRoot = dirname(mainPath);
        const sourceRoot = project.sourceRoot;
        // this by default is src/main.ts
        // settings.mainPath = 'src/main.ts';
        const mainPath = project.architect.build.options.main;
        // this by default is main
        // settings.mainName = 'main';
        const mainName = path_1.basename(mainPath).replace('.ts', '');
        // this by default is app
        // settings.prefix = 'app';
        const prefix = project.prefix;
        // this by default is src/tsconfig.app.json
        // settings.tsConfig = 'src/tsconfig.app.json'
        const tsConfig = project.architect.build.options.tsConfig;
        return {
            ngCliSemVer,
            ngSemVer,
            root,
            sourceRoot,
            mainName,
            mainPath,
            prefix,
            tsConfig,
        };
    }
    else {
        throw new schematics_1.SchematicsException(`This schematic is not compatible with @angular/cli 1.x, use 6.x or newer`);
    }
}
exports.getCoreProjectSettings = getCoreProjectSettings;
// export function getProject(tree: Tree, projectName: string): WorkspaceProject {
//   const workspace = getWorkspace(tree);
//   return workspace.projects[projectName];
// }
function getProjectObject(tree, projectName) {
    const angularJson = utils_1.getAngularJson(tree);
    // return the requested project object
    if (projectName) {
        const project = angularJson.projects[projectName];
        if (!project) {
            throw new schematics_1.SchematicsException(`Couldn't find --projectName "${projectName}" in angular.json`);
        }
        return project;
    }
    // or return the default project
    if (angularJson.defaultProject) {
        return angularJson.projects[angularJson.defaultProject];
    }
    // or return the first project on the list
    // this is the same behaviour as in ng cli
    return Object.values(angularJson.projects)[0];
}
exports.getProjectObject = getProjectObject;
// Step 2 - get entryModule and entryModulePath   => open ${sourceRoot}/${main}.ts 
// - get entryModule from .bootstrapModule(__value__)
// - get entryModulePath from import { ${entryModule} } from "__value__" -- might need to remove ./
function getEntryModuleMetadata(tree, mainPath) {
    const source = utils_1.getSourceFile(tree, mainPath);
    const params = ast_utils_1.getFunctionParams(source, 'bootstrapModule');
    const className = params[0];
    const name = className.replace('Module', '');
    const importPath = ast_utils_1.findImportPath(source, className);
    const mainDir = path_1.dirname(mainPath);
    const path = path_1.join(mainDir, importPath) + '.ts';
    return {
        className,
        name,
        importPath,
        path
    };
}
// Step 3 - get appComponent and appComponentPath => open ${appRoot}/${entryModulePath} 
// - get appComponent from bootstrap: [ __value__ ]
// - get appComponentPath from import { ${appComponent} } from "__value__"
function getEntryComponentMetadata(tree, entryModulePath) {
    const source = utils_1.getSourceFile(tree, entryModulePath);
    // find -> bootstrap -> array -> array value
    // bootstrap: [
    //   AppComponent  <- end result
    // ],
    const node = ast_utils_1.findNode(source, [
        { kind: ts.SyntaxKind.PropertyAssignment, name: 'bootstrap' },
        { kind: ts.SyntaxKind.ArrayLiteralExpression }
    ]);
    const className = node.elements[0].getText();
    const name = className.replace('Component', '');
    const importPath = ast_utils_1.findImportPath(source, className);
    const entryModuleDir = path_1.dirname(entryModulePath);
    const path = path_1.join(entryModuleDir, importPath) + '.ts';
    return {
        className,
        name,
        importPath,
        path
    };
}
// Step 4 - get indexAppRootTag => open ${appRoot}/${appComponentPath} - get from selector: "__value__"
function getAppRootTag(tree, entryComponentPath) {
    const source = utils_1.getSourceFile(tree, entryComponentPath);
    const node = ast_utils_1.findNode(source, [
        { kind: ts.SyntaxKind.PropertyAssignment, name: 'selector' },
        { kind: ts.SyntaxKind.StringLiteral }
    ]);
    const indexAppRootTag = node.text;
    return indexAppRootTag;
}
//# sourceMappingURL=angular-project-parser.js.map