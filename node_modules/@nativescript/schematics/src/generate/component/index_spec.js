"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const testing_1 = require("@angular-devkit/schematics/testing");
const test_1 = require("@schematics/angular/utility/test");
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("../../utils");
const utils_2 = require("../utils");
const test_utils_1 = require("../../test-utils");
xdescribe('Component Schematic', () => {
    const path = 'app';
    const sourceDir = 'app';
    const name = 'foo';
    const project = 'leproj';
    const componentClassName = utils_1.toComponentClassName(name);
    const defaultOptions = { name, path, project };
    const schematicRunner = new testing_1.SchematicTestRunner('nativescript-schematics', path_1.join(__dirname, '../../collection.json'));
    const componentPath = `${sourceDir}/${path}/${name}/${name}.component.ts`;
    const getTemplatePath = (extension) => `${sourceDir}/${path}/${name}/${name}.component${extension}.html`;
    const noExtensionTemplatePath = getTemplatePath('');
    const nsTemplatePath = getTemplatePath(utils_2.DEFAULT_SHARED_EXTENSIONS.ns);
    const webTemplatePath = getTemplatePath(utils_2.DEFAULT_SHARED_EXTENSIONS.web);
    let appTree;
    let tree;
    beforeEach(() => {
        appTree = new schematics_1.VirtualTree();
        appTree = test_1.createAppModule(appTree, `/${sourceDir}/${path}/app.module.ts`);
        appTree = utils_1.createEmptyProject(appTree);
    });
    const hasModuleId = () => {
        const content = test_1.getFileContent(tree, componentPath);
        const matcher = test_utils_1.isInComponentMetadata(componentClassName, 'moduleId', 'module.id', false);
        return content.match(matcher);
    };
    const ensureWebTemplate = (tree, path) => {
        expect(tree.exists(path)).toBeTruthy();
        const content = test_1.getFileContent(tree, webTemplatePath);
        expect(content).toMatch(/\<p\>/);
    };
    const ensureNsTemplate = (tree, path) => {
        expect(tree.exists(path)).toBeTruthy();
        const content = test_1.getFileContent(tree, path);
        expect(content).toMatch(/Button/);
    };
    describe('when in ns-only project', () => {
        beforeEach(() => {
            const options = Object.assign({}, defaultOptions, { nativescript: true, web: false });
            tree = schematicRunner.runSchematic('component', options, appTree);
        });
        it('should create template without extension', () => expect(tree.exists(noExtensionTemplatePath)).toBeTruthy());
        it('should not create template with {N} extension', () => expect(tree.exists(nsTemplatePath)).toBeFalsy());
        it('should add {N}-specific markup in template', () => ensureNsTemplate(tree, noExtensionTemplatePath));
        it('should add module id', () => expect(hasModuleId()).toBeTruthy());
    });
    describe('when in web-only project', () => {
        beforeEach(() => {
            const options = Object.assign({}, defaultOptions, { nativescript: false, web: true });
            tree = schematicRunner.runSchematic('component', options, appTree);
        });
        it('should add web-specific markup file', () => ensureWebTemplate(tree, webTemplatePath));
        it('should add module id', () => expect(hasModuleId()).toBeFalsy());
    });
    describe('when in ns+web project', () => {
        beforeEach(() => {
            const options = Object.assign({}, defaultOptions, { web: true, nativescript: true });
            tree = schematicRunner.runSchematic('component', options, appTree);
        });
        it('should add web-specific markup file', () => ensureWebTemplate(tree, webTemplatePath));
        it('should add {N}-specific markup file', () => ensureNsTemplate(tree, nsTemplatePath));
        it('should add module id', () => expect(hasModuleId()).toBeTruthy());
    });
    describe('specifying custom extension', () => {
        it('should respect specified {N} extension', () => {
            const customExtension = '.mobile';
            const options = Object.assign({}, defaultOptions, { nsExtension: customExtension, nativescript: true });
            tree = schematicRunner.runSchematic('component', options, appTree);
            const componentTemplatePath = getTemplatePath(customExtension);
            expect(tree.exists(componentTemplatePath)).toBeTruthy();
        });
        it('should respect specified web extension', () => {
            const customExtension = '.web';
            const options = Object.assign({}, defaultOptions, { webExtension: customExtension, web: true });
            tree = schematicRunner.runSchematic('component', options, appTree);
            const componentTemplatePath = getTemplatePath(customExtension);
            expect(tree.exists(componentTemplatePath)).toBeTruthy();
        });
        it('should respect both web and {N} extensions', () => {
            const nsExtension = '.mobile';
            const webExtension = '.web';
            const options = Object.assign({}, defaultOptions, { nsExtension, webExtension, web: true, nativescript: true });
            tree = schematicRunner.runSchematic('component', options, appTree);
            const nsTemplate = getTemplatePath(nsExtension);
            const webTemplate = getTemplatePath(webExtension);
            expect(tree.exists(nsTemplate)).toBeTruthy();
            expect(tree.exists(webTemplate)).toBeTruthy();
        });
    });
});
//# sourceMappingURL=index_spec.js.map