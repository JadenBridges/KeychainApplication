"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const path_1 = require("path");
;
// export const validateProject = () => (tree: Tree, options: any) => {
//   // if --web flag explicitly specified
//   if (options.web === true) {
//     // then nsconfig.json must be present
//     if (tree.exists('nsconfig.json')) {
//       throw new SchematicsException(`nsconfig.json not found. While --web flag specified`);
//     }
//     // also nsconfig must contain the "webext" property
//     const nsconfig = getNsConfig(tree);
//     if (nsconfig.webext == null) {
//       throw new SchematicsException(`property webext is missing in nsconfig.json.
//   Add the following to the configuration:
//     "webext": ""`);
//     }
//   }
// }
exports.DEFAULT_SHARED_EXTENSIONS = {
    web: '',
    ns: '.tns'
};
const isNs = (tree) => {
    const packageJson = utils_1.getPackageJson(tree);
    return !!packageJson.nativescript;
};
// TODO: need a better way to identify {A} Web projects
const isWeb = (tree) => {
    if (!tree.exists('nsconfig.json')) {
        console.log(`nsconfig.json not found. Assuming this is a {N} only project`);
        return false;
    }
    const config = utils_1.getNsConfig(tree);
    return config.webext != null;
};
exports.getPlatformUse = (tree, options) => {
    const nsReady = isNs(tree);
    const webReady = isWeb(tree);
    const nsOnly = nsReady && !webReady;
    const useNs = options.nativescript && nsReady;
    const useWeb = options.web && webReady;
    return {
        nsReady,
        webReady,
        nsOnly,
        useNs,
        useWeb
    };
};
exports.getExtensions = (tree, options) => {
    if (isWeb(tree)) {
        const nsconfig = utils_1.getNsConfig(tree);
        const result = {
            ns: (options.nsExtension != null)
                ? options.nsExtension : nsconfig.nsext,
            web: (options.webExtension != null)
                ? options.webExtension : nsconfig.webext
        };
        result.ns = parseExtension(result.ns);
        result.web = parseExtension(result.web);
        if (result.ns === result.web) {
            return exports.DEFAULT_SHARED_EXTENSIONS;
        }
        return result;
    }
    else {
        return {
            ns: '',
            web: ''
        };
    }
};
const parseExtension = (ext) => {
    // don't change, if the extension is empty or it already starts with a .
    if (ext === '' || ext.startsWith('.')) {
        return ext;
    }
    return '.' + ext;
};
exports.getNsConfigExtension = (tree) => {
    if (!tree.exists('nsconfig.json')) {
        console.warn('nsconfig not found, using .tns as a default extension for NativeScript files');
        return {
            ns: '.tns',
            web: ''
        };
    }
    const nsconfig = utils_1.getNsConfig(tree);
    return {
        ns: nsconfig.nsext || '.tns',
        web: nsconfig.webext || ''
    };
};
exports.removeNsSchemaOptions = (options) => {
    const duplicate = Object.assign({}, options);
    delete duplicate['web'];
    delete duplicate['nativescript'];
    delete duplicate['nsExtension'];
    delete duplicate['webExtension'];
    return duplicate;
};
exports.addExtension = (fileName, ext) => {
    const fileExtension = path_1.extname(fileName);
    return fileName.replace(fileExtension, `${ext}${fileExtension}`);
};
//# sourceMappingURL=utils.js.map