"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const utils_1 = require("./utils");
class SemVer {
    constructor(major, minor, patch, tag = null) {
        this.major = major;
        this.minor = minor;
        this.patch = patch;
        this.tag = tag;
    }
    toString() {
        const ver = `${this.major}.${this.minor}.${this.patch}`;
        return (this.tag) ? `${ver}-${this.tag}` : ver;
    }
}
exports.SemVer = SemVer;
exports.getAngularSemver = (tree) => {
    return exports.getModuleSemver(tree, '@angular/core');
};
exports.getAngularCLISemver = (tree) => {
    return exports.getModuleSemver(tree, '@angular/cli');
};
exports.getModuleSemver = (tree, moduleName) => {
    const packageJson = utils_1.getPackageJson(tree);
    const moduleVersion = packageJson.dependencies[moduleName] || packageJson.devDependencies[moduleName];
    const result = parseSemver(moduleVersion);
    if (!result) {
        throw new schematics_1.SchematicsException(`Angular Project Parser, cannot parse the current ${moduleName} version [${moduleVersion}]`);
    }
    return result;
};
const parseSemver = (moduleVersion) => {
    const match = moduleVersion.match('[0-9]+\.[0-9]+\.[0-9]+');
    if (!match) {
        return null;
    }
    const parts = match[0].split('.');
    if (parts[2].indexOf('-')) {
        const patchTag = parts[2].split('-');
        return new SemVer(Number.parseInt(parts[0]), Number.parseInt(parts[1]), Number.parseInt(patchTag[0]), patchTag[1]);
    }
    return new SemVer(Number.parseInt(parts[0]), Number.parseInt(parts[1]), Number.parseInt(parts[2]));
};
//# sourceMappingURL=node-utils.js.map