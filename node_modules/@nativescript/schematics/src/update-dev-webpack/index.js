"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const ts = require("typescript");
const utils_1 = require("../utils");
const ast_utils_1 = require("../ast-utils");
const webpackConfigPath = 'webpack.config.js';
// You don't have to export the function as default. You can also have more than one rule factory
// per file.
function default_1(options) {
    return schematics_1.chain([
        validatePrerequisits,
        validateOptions(options),
        updateTsConfigExtension(options.nsext),
    ]);
}
exports.default = default_1;
const validatePrerequisits = (tree) => {
    //make sure that nativescript-dev-webpack is installed
    if (!tree.exists(webpackConfigPath)) {
        throw new schematics_1.SchematicsException(`nativescript-dev-webpack is missing. Run:
npm nativescript-dev-webpack
and try again.`);
    }
};
const validateOptions = (options) => () => {
    if (options.nsext.charAt(0) !== '.') {
        throw new schematics_1.SchematicsException(`nsext [${options.nsext}] should start with a .`);
    }
};
const updateTsConfigExtension = (nsext) => (tree) => {
    const source = utils_1.getSourceFile(tree, webpackConfigPath);
    const propertyToUpdate = '"tsconfig.esm.json"';
    const node = ast_utils_1.findNode(source, [
        { kind: ts.SyntaxKind.NewExpression, name: 'nsWebpack.NativeScriptAngularCompilerPlugin' },
        { kind: ts.SyntaxKind.PropertyAssignment, name: 'tsConfigPath' }
    ]);
    // TODO: this specific config might change with the next update
    const tsConfigPath = `aot ? "tsconfig.aot.json" : "tsconfig${nsext}.json"`;
    ast_utils_1.replaceTextInNode(tree, node, propertyToUpdate, tsConfigPath);
};
//# sourceMappingURL=index.js.map