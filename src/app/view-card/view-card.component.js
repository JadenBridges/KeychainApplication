"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var app = require("application");
var keychain_card_1 = require("../keychain-card");
var ZXing = require("nativescript-zxing");
var ImageSource = require("image-source");
var ViewCardComponent = /** @class */ (function () {
    function ViewCardComponent(keychaincardclass) {
        this.keychaincardclass = keychaincardclass;
        // Use the component constructor to inject providers.
        this.barcodeId = this.keychaincardclass.getBarcodeId();
        this.barcodeFormat = this.keychaincardclass.getBarcodeFormat();
        this.cardLoc = this.keychaincardclass.getCardLocation();
        this.cardName = this.keychaincardclass.getCardName();
    }
    ViewCardComponent.prototype.ngOnInit = function () {
        switch (this.barcodeFormat) {
            case "QR_CODE":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.QR_CODE //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "UPC_A":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.UPC_A //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "UPC_E":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.UPC_E //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "AZTEC":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.AZTEC //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "CODABAR":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.CODABAR //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "CODE_39":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.CODE_39 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "CODE_93":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.CODE_93 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "CODE_128":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.CODE_128 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "DATA_MATRIX":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.DATA_MATRIX //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "EAN_8":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.EAN_8 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "EAN_13":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.EAN_13 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "ITF":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.ITF //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "MAXICODE":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.MAXICODE //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
            case "PDF_417":
                this.barcodeImage = this.barcodeImg.nativeElement;
                this.zx = new ZXing();
                this.newImg = this.zx.createBarcode({
                    encode: this.barcodeId,
                    format: ZXing.PDF_417 //format
                });
                this.barcodeImage.imageSource = ImageSource.fromNativeSource(this.newImg);
                break;
        }
    };
    ViewCardComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    tslib_1.__decorate([
        core_1.ViewChild("barcodeImg"),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ViewCardComponent.prototype, "barcodeImg", void 0);
    ViewCardComponent = tslib_1.__decorate([
        core_1.Component({
            selector: "ViewCard",
            moduleId: module.id,
            styleUrls: ["./view-card.component.css"],
            templateUrl: "./view-card.component.html"
        }),
        tslib_1.__metadata("design:paramtypes", [keychain_card_1.KeychainCardClass])
    ], ViewCardComponent);
    return ViewCardComponent;
}());
exports.ViewCardComponent = ViewCardComponent;
//# sourceMappingURL=data:application/json;base64,